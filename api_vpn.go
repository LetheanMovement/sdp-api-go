/*
Lethean Binary API

Functionality to simplify using LTHN

API version: 1.2.2
Contact: contact@lethean.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package letheanSDP

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

type VpnApi interface {

	/*
	StartLetheand Method for StartLetheand

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiStartLetheandRequest
	*/
	StartLetheand(ctx _context.Context) ApiStartLetheandRequest

	// StartLetheandExecute executes the request
	StartLetheandExecute(r ApiStartLetheandRequest) (*_nethttp.Response, error)
}

// VpnApiService VpnApi service
type VpnApiService service

type ApiStartLetheandRequest struct {
	ctx _context.Context
	ApiService VpnApi
	dataDir *string
	version *bool
}

// Returns the binary version
func (r ApiStartLetheandRequest) DataDir(dataDir string) ApiStartLetheandRequest {
	r.dataDir = &dataDir
	return r
}
// Returns the binary version
func (r ApiStartLetheandRequest) Version(version bool) ApiStartLetheandRequest {
	r.version = &version
	return r
}

func (r ApiStartLetheandRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.StartLetheandExecute(r)
}

/*
StartLetheand Method for StartLetheand

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiStartLetheandRequest
*/
func (a *VpnApiService) StartLetheand(ctx _context.Context) ApiStartLetheandRequest {
	return ApiStartLetheandRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VpnApiService) StartLetheandExecute(r ApiStartLetheandRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VpnApiService.StartLetheand")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/letheand/start"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.dataDir == nil {
		return nil, reportError("dataDir is required and must be specified")
	}

	if r.version != nil {
		localVarQueryParams.Add("version", parameterToString(*r.version, ""))
	}
	localVarQueryParams.Add("data_dir", parameterToString(*r.dataDir, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
